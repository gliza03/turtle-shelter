<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Portal - Turtle Shelter Project</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <style>
        #event-management {
            font-family: Arial, sans-serif;
            margin: 20px auto;
            max-width: 1200px;
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
    
        #event-management h2,
        #event-management h3 {
            text-align: center;
            margin-bottom: 20px;
            color: #333;
        }
    
        #event-management .event-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
    
        #event-management .event-table th,
        #event-management .event-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }
    
        #event-management .event-table th {
            background-color: var(--gray-blue);
            color: white;
            font-weight: bold;
        }
    
        #event-management .event-table tr:nth-child(even) {
            background-color: #f2f2f2;
        }
    
        #event-management .event-table tr:hover {
            background-color: #e9e9e9;
        }
    
        #event-management .event-status {
            padding: 4px;
            font-size: 14px;
        }
    
        #event-management button {
            padding: 6px 12px;
            font-size: 14px;
            background-color: #007BFF;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
    
        #event-management button:hover {
            background-color: #0056b3;
        }
    
        #event-management .edit-btn {
            background-color: #28a745;
        }
    
        #event-management .edit-btn:hover {
            background-color: #218838;
        }
    
        #event-management .save-btn {
            background-color: #ffc107;
            display: none;
        }
    
        #event-management .save-btn:hover {
            background-color: #e0a800;
        }
    
        #event-management .delete-btn {
            background-color: #dc3545;
        }
    
        #event-management .delete-btn:hover {
            background-color: #c82333;
        }
    
        #event-management .search-container {
            display: flex;
            justify-content: center;
            margin: 20px 0;
        }
    
        #event-management .search-container input[type="text"] {
            width: 300px;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin-right: 10px;
        }
    
        #event-management #event-history {
            margin: 20px auto;
        }
    
        #event-management #event-history .event-card {
            border: 1px solid #ddd;
            border-radius: 8px;
            background-color: white;
            padding: 15px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
    
        #event-management #load-more-events {
            display: block;
            margin: 20px auto;
            width: 200px;
        }
    </style>
    
</head>
<body>
    <!-- Admin Portal Container -->
    <div class="admin-portal">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="sidebar-header">
                <h2>Turtle Shelter Admin</h2>
            </div>
            <ul class="nav-list">
                <li data-section="dashboard" class="nav-item active"><i class="fas fa-home"></i> Dashboard</li>
                <li data-section="event-management" class="nav-item"><i class="fas fa-calendar-alt"></i> Events</li>
                <li data-section="Users" class="nav-item"><i class="fas fa-users"></i> Users</li>
                <li data-section="Volunteers" class="nav-item"><i class="fas fa-hands-helping"></i> Volunteers</li>
                <li data-section="Distribution" class="nav-item"><i class="fas fa-truck"></i> Distribution Management</li>
            </ul>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <!-- Header -->
            <header class="admin-header">
                <h1>Welcome, Admin</h1>
                <button class="button button-outline">Logout</button>
            </header>

            <section id="dashboard" class="content-section active">
                <h2 style="color:black">Dashboards!</h2>
                <!-- Tableau Dashboards Section -->
                <div class="tableau-container">
                    <div class="tableau-grid">
                        <div class="tableau-dashboard">
                            <h3>Volunteer Analytics</h3>
                            <div class='tableauPlaceholder' id='viz1733468419797' style='position: relative'>
                                <noscript><a href='#'><img alt=' ' src='https://public.tableau.com/static/images/IN/INTEX1_17334334657650/Volunteers/1_rss.png' style='border: none' /></a></noscript>
                                <object class='tableauViz' style='display:none;'>
                                    <param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> 
                                    <param name='embed_code_version' value='3' /> 
                                    <param name='site_root' value='' />
                                    <param name='name' value='INTEX1_17334334657650/Volunteers' />
                                    <param name='tabs' value='yes' />
                                    <param name='toolbar' value='yes' />
                                    <param name='static_image' value='https://public.tableau.com/static/images/IN/INTEX1_17334334657650/Volunteers/1.png' /> 
                                    <param name='animate_transition' value='yes' />
                                    <param name='display_static_image' value='yes' />
                                    <param name='display_spinner' value='yes' />
                                    <param name='display_overlay' value='yes' />
                                    <param name='display_count' value='yes' />
                                    <param name='language' value='en-US' />
                                    <param name='filter' value='publish=yes' />
                                </object>
                            </div>
                        </div>
            
                        <div class="tableau-dashboard">
                            <h3>Event Analytics</h3>
                            <div class='tableauPlaceholder' id='viz1733468687166' style='position: relative'>
                                <noscript><a href='#'><img alt=' ' src='https://public.tableau.com/static/images/IN/INTEX1_17334334657650/Events/1_rss.png' style='border: none' /></a></noscript>
                                <object class='tableauViz' style='display:none;'>
                                    <param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> 
                                    <param name='embed_code_version' value='3' /> 
                                    <param name='site_root' value='' />
                                    <param name='name' value='INTEX1_17334334657650/Events' />
                                    <param name='tabs' value='yes' />
                                    <param name='toolbar' value='yes' />
                                    <param name='static_image' value='https://public.tableau.com/static/images/IN/INTEX1_17334334657650/Events/1.png' /> 
                                    <param name='animate_transition' value='yes' />
                                    <param name='display_static_image' value='yes' />
                                    <param name='display_spinner' value='yes' />
                                    <param name='display_overlay' value='yes' />
                                    <param name='display_count' value='yes' />
                                    <param name='language' value='en-US' />
                                    <param name='filter' value='publish=yes' />
                                </object>
                            </div>
                        </div>
            
                        <div class="tableau-dashboard">
                            <h3>Distribution Analytics</h3>
                            <div class='tableauPlaceholder' id='viz1733468760043' style='position: relative'>
                                <noscript><a href='#'><img alt=' ' src='https://public.tableau.com/static/images/IN/INTEX1_17334334657650/Distribution/1_rss.png' style='border: none' /></a></noscript>
                                <object class='tableauViz' style='display:none;'>
                                    <param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> 
                                    <param name='embed_code_version' value='3' /> 
                                    <param name='site_root' value='' />
                                    <param name='name' value='INTEX1_17334334657650/Distribution' />
                                    <param name='tabs' value='yes' />
                                    <param name='toolbar' value='yes' />
                                    <param name='static_image' value='https://public.tableau.com/static/images/IN/INTEX1_17334334657650/Distribution/1.png' /> 
                                    <param name='animate_transition' value='yes' />
                                    <param name='display_static_image' value='yes' />
                                    <param name='display_spinner' value='yes' />
                                    <param name='display_overlay' value='yes' />
                                    <param name='display_count' value='yes' />
                                    <param name='language' value='en-US' />
                                    <param name='filter' value='publish=yes' />
                                </object>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
            <script type='text/javascript'>
                function initializeTableauDashboards() {
                    const dashboardIds = ['viz1733468419797', 'viz1733468687166', 'viz1733468760043'];
                    
                    dashboardIds.forEach(id => {
                        const divElement = document.getElementById(id);
                        if (divElement) {
                            const vizElement = divElement.getElementsByTagName('object')[0];
                            setVizDimensions(divElement, vizElement);
                        }
                    });
                }
            
                function setVizDimensions(divElement, vizElement) {
                    if (divElement.offsetWidth > 800) {
                        vizElement.style.minWidth = '1000px';
                        vizElement.style.maxWidth = '100%';
                        vizElement.style.minHeight = '850px';
                        vizElement.style.maxHeight = (divElement.offsetWidth * 0.75) + 'px';
                    } else if (divElement.offsetWidth > 500) {
                        vizElement.style.minWidth = '1000px';
                        vizElement.style.maxWidth = '100%';
                        vizElement.style.minHeight = '850px';
                        vizElement.style.maxHeight = (divElement.offsetWidth * 0.75) + 'px';
                    } else {
                        vizElement.style.width = '100%';
                        vizElement.style.minHeight = '1150px';
                        vizElement.style.maxHeight = (divElement.offsetWidth * 1.77) + 'px';
                    }
                }
            
                // Initialize when DOM is loaded
                document.addEventListener('DOMContentLoaded', function() {
                    var scriptElement = document.createElement('script');
                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';
                    scriptElement.onload = initializeTableauDashboards;
                    document.body.appendChild(scriptElement);
                });
            </script>

            <section id="event-management" class="content-section">
                <h2>Event Management</h2>
                <div id="new-events-management">
                    <h3>New Event Requests</h3>
                    <table class="event-table">
                        <thead>
                            <tr>
                                <th>Event Type</th>
                                <th>Location</th>
                                <th>Address</th>
                                <th>Date</th>
                                <th>Start Time</th>
                                <th>End Time</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="new-events-table">
                            <!-- Populated dynamically -->
                        </tbody>
                    </table>
                </div>
                <!-- Calendly and Calendar -->
                <div class="calendar-container">
                    <div class="calendly-inline-widget" data-url="https://calendly.com/intexgroup414/jacket-volunteering-event"></div>
                    <div class="iframe-container">
                        <iframe 
                            src="https://calendar.google.com/calendar/embed?src=intexgroup414%40gmail.com&ctz=America%2FFort_Nelson" 
                            style="border: 0; width: 100%; height: 100%;" 
                            frameborder="0" 
                            scrolling="no">
                        </iframe>
                    </div>
                </div>
                <script type="text/javascript" src="https://assets.calendly.com/assets/external/widget.js" async></script>
                <div id="old-events-management">
                    <h3>All Events</h3>
                    <div class="search-container">
                        <input type="text" id="event-search" placeholder="Search events..." />
                        <button id="search-events-btn">Search</button>
                    </div>
                    <table class="event-table">
                        <thead>
                            <tr>
                                <th>Event Type</th>
                                <th>Location</th>
                                <th>Address</th>
                                <th>Date</th>
                                <th>Start Time</th>
                                <th>End Time</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="old-events-table">
                            <!-- Populated dynamically -->
                        </tbody>
                    </table>
                    <a href="/eventrequest" class="button button-primary" style="background-color: var(--primary);">Add Event</a>
                </div>
            </section>
            
            <script>
                // Fetch and display new events
                async function fetchNewEvents() {
                    const response = await fetch('/events/new');
                    const events = await response.json();
                    populateEvents(events, 'new-events-table', true);
                }
                
                // Fetch and display old events
                async function fetchOldEvents(page = 1, search = '') {
                    const response = await fetch(`/events/history?page=${page}&search=${search}`);
                    const events = await response.json();
                    populateEvents(events, 'old-events-table', false, page);
                    document.getElementById('old-events-management').dataset.page = page;
                }
                
                // Populate events into tables
                function populateEvents(events, tableId, isNew, page = 1) {
                    const table = document.getElementById(tableId);
                    if (page === 1) table.innerHTML = '';
                
                    events.forEach((event) => {
                        const row = document.createElement('tr');
                        row.dataset.originalRow = JSON.stringify(event);
                        row.innerHTML = `
                            <td>${event.event_type}</td>
                            <td>${event.event_location}</td>
                            <td>${event.event_street}, ${event.event_city}, ${event.event_state} ${event.event_zip_code}</td>
                            <td>${new Date(event.event_date).toISOString().split('T')[0]}</td>
                            <td>${event.event_start_time}</td>
                            <td>${event.event_end_time}</td>
                            <td>
                                <span class="status-badge status-${event.event_status.toLowerCase()}">
                                    ${event.event_status}
                                </span>
                            </td>
                            <td>
                                <div class="button-group">
                                    <button class="edit-btn" data-id="${event.event_id}">Edit</button>
                                    <button class="save-btn" data-id="${event.event_id}" style="display:none;">Save</button>
                                    <button class="cancel-btn" data-id="${event.event_id}" style="display:none;">Cancel</button>
                                    <button class="delete-btn" data-id="${event.event_id}">Delete</button>
                                </div>
                            </td>
                        `;
                        table.appendChild(row);
                
                        // Add event listeners to the buttons
                        const buttons = row.querySelectorAll('button');
                        buttons.forEach(button => {
                            if (button.classList.contains('edit-btn')) {
                                button.addEventListener('click', handleEdit);
                            } else if (button.classList.contains('save-btn')) {
                                button.addEventListener('click', handleSave);
                            } else if (button.classList.contains('cancel-btn')) {
                                button.addEventListener('click', handleCancel);
                            } else if (button.classList.contains('delete-btn')) {
                                button.addEventListener('click', handleDelete);
                            }
                        });
                    });
                }
                
                // Toggle action buttons visibility
                function toggleActionButtons(row, isEditing) {
                    const editBtn = row.querySelector('.edit-btn');
                    const saveBtn = row.querySelector('.save-btn');
                    const cancelBtn = row.querySelector('.cancel-btn');
                    const deleteBtn = row.querySelector('.delete-btn');
                
                    editBtn.style.display = isEditing ? 'none' : 'inline-block';
                    saveBtn.style.display = isEditing ? 'inline-block' : 'none';
                    cancelBtn.style.display = isEditing ? 'inline-block' : 'none';
                    deleteBtn.style.display = isEditing ? 'none' : 'inline-block';
                }
                
                // Handle edit functionality
                function handleEdit(e) {
                    const row = e.target.closest('tr');
                    const originalData = JSON.parse(row.dataset.originalRow);
                
                    row.querySelectorAll('td').forEach((td, i) => {
                        if (i === 0) {
                            td.innerHTML = `
                                <select class="event-type">
                                    <option value="Sewing" ${originalData.event_type === 'Sewing' ? 'selected' : ''}>Sewing</option>
                                    <option value="Non-Sewing" ${originalData.event_type === 'Non-Sewing' ? 'selected' : ''}>Non-Sewing</option>
                                    <option value="Both" ${originalData.event_type === 'Both' ? 'selected' : ''}>Both</option>
                                </select>`;
                        } else if (i === 6) {
                            td.innerHTML = `
                                <select class="event-status">
                                    <option value="Requested" ${originalData.event_status === 'Requested' ? 'selected' : ''}>Requested</option>
                                    <option value="Scheduled" ${originalData.event_status === 'Scheduled' ? 'selected' : ''}>Scheduled</option>
                                    <option value="Completed" ${originalData.event_status === 'Completed' ? 'selected' : ''}>Completed</option>
                                    <option value="Canceled" ${originalData.event_status === 'Canceled' ? 'selected' : ''}>Canceled</option>
                                    <option value="Declined" ${originalData.event_status === 'Declined' ? 'selected' : ''}>Declined</option>
                                </select>`;
                        } else if (i < 6) {
                            const value = td.textContent.trim();
                            td.innerHTML = `<input type="text" value="${value}" />`;
                        }
                    });
                    toggleActionButtons(row, true);
                }
                
                // Handle save functionality
                async function handleSave(e) {
                    const row = e.target.closest('tr');
                    const id = e.target.dataset.id;
                    const inputs = row.querySelectorAll('input');
                    const eventTypeSelect = row.querySelector('.event-type');
                    const eventStatusSelect = row.querySelector('.event-status');
                
                    const updatedEvent = {
                        event_type: eventTypeSelect ? eventTypeSelect.value : row.children[0].textContent.trim(),
                        event_location: inputs[0].value,
                        event_street: inputs[1].value.split(',')[0],
                        event_city: inputs[1].value.split(',')[1].trim(),
                        event_state: inputs[1].value.split(',')[2].trim().split(' ')[0],
                        event_zip_code: inputs[1].value.split(',')[2].trim().split(' ')[1],
                        event_date: inputs[2].value,
                        event_start_time: inputs[3].value,
                        event_end_time: inputs[4].value,
                        event_status: eventStatusSelect ? eventStatusSelect.value : row.children[6].textContent.trim(),
                    };
                
                    try {
                        const response = await fetch(`/events/update/${id}`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(updatedEvent),
                        });
                
                        if (response.ok) {
                            // Refetch to reflect changes
                            fetchNewEvents();
                            fetchOldEvents();
                        } else {
                            console.error('Failed to update event');
                        }
                    } catch (error) {
                        console.error('Error updating event:', error);
                    }
                }
                
                // Handle cancel functionality
                function handleCancel(e) {
                    const row = e.target.closest('tr');
                    const originalData = JSON.parse(row.dataset.originalRow);
                
                    row.querySelectorAll('td').forEach((td, i) => {
                        if (i === 0) {
                            td.textContent = originalData.event_type;
                        } else if (i === 6) {
                            td.textContent = originalData.event_status;
                        } else if (i < 6) {
                            td.textContent = Object.values(originalData)[i];
                        }
                    });
                    toggleActionButtons(row, false);
                }
                
                // Handle delete functionality
                async function handleDelete(e) {
                    if (confirm('Are you sure you want to delete this event?')) {
                        const id = e.target.dataset.id;
                        try {
                            const response = await fetch(`/events/delete/${id}`, { 
                                method: 'DELETE'
                            });
                            if (response.ok) {
                                // Refetch to reflect changes
                                fetchNewEvents();
                                fetchOldEvents();
                            } else {
                                console.error('Failed to delete event');
                            }
                        } catch (error) {
                            console.error('Error deleting event:', error);
                        }
                    }
                }
                
                // Initialize events and search functionality
                document.addEventListener('DOMContentLoaded', function() {
                    fetchNewEvents();
                    fetchOldEvents();
                
                    // Search functionality
                    document.getElementById('search-events-btn').addEventListener('click', () => {
                        const search = document.getElementById('event-search').value;
                        fetchOldEvents(1, search);
                    });
                
                    // Load more functionality
                    const loadMoreBtn = document.getElementById('load-more-events');
                    if (loadMoreBtn) {
                        loadMoreBtn.addEventListener('click', () => {
                            const search = document.getElementById('event-search').value;
                            const currentPage = parseInt(document.getElementById('old-events-management').dataset.page || 1);
                            fetchOldEvents(currentPage + 1, search);
                        });
                    }
                });
                </script>
            
            <section id="Users" class="content-section">
                <h2>Admin User Management</h2>
            
                <!-- Search Bar -->
                <div class="admin-search-container">
                    <label for="adminSearch">Search Admins:</label>
                    <input 
                        type="text" 
                        id="adminSearch" 
                        placeholder="Search by name..."
                        autocomplete="off"
                    >
                </div>
            
                <!-- Admin List -->
                <div id="adminList">
                    <!-- Admin cards will be dynamically inserted here -->
                </div>
            
                <!-- Load More Button -->
                <button id="loadMoreAdmins" class="admin-load-more">Load More Admins</button>
    
                <div class="text-center">
                    <a href="/createaccount" class="create-account-button">Create New Account</a>
                </div>
            </section>
            
            <style>
                /* Shared Button Styling */
                .button-2 {
                    cursor: pointer;
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                    padding: 10px 15px;
                    font-size: 14px;
                    border-radius: 5px;
                    transition: 0.3s;
                }
            
                .button-2:hover {
                    background-color: #45a049;
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                    transform: translateY(-2px);
                }
            
                .button-outline-2 {
                    background-color: red;
                    color: white;
                }
            
                .button-outline-2:hover {
                    background-color: darkred;
                    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                    transform: translateY(-2px);
                }
                /* Editable Fields */
                [contenteditable="true"] {
                    outline: 2px dashed #808080; /* Gray color for editable field outline */
                    padding: 2px;
                    border-radius: 3px;
                }
            </style>
            
            <script>
                let adminCurrentPage = 1; // Pagination state for admins
                const loadMoreAdminsButton = document.getElementById("loadMoreAdmins");
                const adminList = document.getElementById("adminList");
            
                // Function to render a single admin card
                const renderAdminCard = (admin) => `
                    <div class="admin-card" data-id="${admin.account_id}">
                        <div class="admin-info">
                            <h3 contenteditable="false">${admin.account_first_name} ${admin.account_last_name}</h3>
                            <p>
                                <strong>Username:</strong> 
                                <span contenteditable="false">${admin.account_username}</span>
                            </p>
                            <p>
                                <strong>Email:</strong> 
                                <span contenteditable="false">${admin.account_email}</span>
                            </p>
                            <p>
                                <strong>Role:</strong> 
                                <span contenteditable="false" class="role-display">
                                    ${admin.role_id === 1 ? "Normal" : admin.role_id === 2 ? "Admin" : "Super User"}
                                </span>
                                <select class="role-select" style="display:none;">
                                    <option value="1" ${admin.role_id === 1 ? "selected" : ""}>Normal</option>
                                    <option value="2" ${admin.role_id === 2 ? "selected" : ""}>Admin</option>
                                    <option value="3" ${admin.role_id === 3 ? "selected" : ""}>Super User</option>
                                </select>
                            </p>
                        </div>
                        <div class="admin-actions">
                            <button class="admin-button admin-edit-button" onclick="toggleEditAdmin(this, ${admin.account_id})">Edit</button>
                            <button class="admin-button admin-cancel-button" style="display:none;" onclick="cancelEditAdmin(this, ${admin.account_id})">Cancel</button>
                            <button class="admin-button admin-delete-button" onclick="deleteAdmin(${admin.account_id})">Delete</button>
                        </div>
                    </div>
                `;
            
                // Fetch Admins and Append to the List
                const fetchAdmins = async (page = 1, searchQuery = "") => {
                    try {
                        const response = await fetch(`/admins?page=${page}&search=${searchQuery}`);
                        const data = await response.json();
            
                        // Append admins to the list
                        data.admins.forEach(admin => {
                            const adminCard = renderAdminCard(admin);
                            adminList.insertAdjacentHTML("beforeend", adminCard);
                        });
            
                        // If no more admins, hide the load more button
                        if (data.admins.length === 0) {
                            loadMoreAdminsButton.style.display = "none";
                        }
                    } catch (error) {
                        console.error("Error fetching admins:", error);
                    }
                };
            
                // Load More Button Click Event
                loadMoreAdminsButton.addEventListener("click", () => {
                    adminCurrentPage++;
                    fetchAdmins(adminCurrentPage);
                });
            
                // Delete Admin
                const deleteAdmin = async (id) => {
                    if (confirm("Are you sure you want to delete this admin?")) {
                        try {
                            const response = await fetch(`/admins/${id}`, { method: "DELETE" });
                            if (response.ok) {
                                document.querySelector(`.admin-card[data-id="${id}"]`).remove();
                                alert("Admin deleted successfully!");
                            } else {
                                alert("Failed to delete admin.");
                            }
                        } catch (error) {
                            console.error("Error deleting admin:", error);
                        }
                    }
                };
            
                // Toggle Edit Mode for Admins
                const toggleEditAdmin = (button, id) => {
                    const card = document.querySelector(`.admin-card[data-id="${id}"]`);
                    const isEditing = button.innerText === "Save Edits";

                    if (isEditing) {
                        // Save edits
                        saveAdminEdits(card, id);
                        button.innerText = "Edit";
                        button.nextElementSibling.style.display = "none"; // Hide Cancel button
                        button.nextElementSibling.nextElementSibling.disabled = false; // Enable Delete button

                        // Hide the dropdown and show the role display
                        card.querySelector(".role-display").style.display = "inline";
                        card.querySelector(".role-select").style.display = "none";
                    } else {
                        // Enable editing
                        card.querySelectorAll("[contenteditable]").forEach(el => el.setAttribute("contenteditable", "true"));
                        button.innerText = "Save Edits";
                        button.nextElementSibling.style.display = "inline-block"; // Show Cancel button
                        button.nextElementSibling.nextElementSibling.disabled = true; // Disable Delete button

                        // Show the dropdown and hide the role display
                        card.querySelector(".role-display").style.display = "none";
                        card.querySelector(".role-select").style.display = "inline-block";
                    }
                };

            
                // Cancel Edit for Admins
                        const cancelEditAdmin = (button, id) => {
                            const card = document.querySelector(`.admin-card[data-id="${id}"]`);

                            // Reset fields to original values by reloading the admin data
                            fetch(`/admins?page=1&id=${id}`)
                                .then(response => response.json())
                                .then(data => {
                                    const admin = data.admins[0];
                                    card.querySelector("h3").innerText = `${admin.account_first_name} ${admin.account_last_name}`;
                                    card.querySelector("p:nth-of-type(1) span").innerText = admin.account_username;
                                    card.querySelector("p:nth-of-type(2) span").innerText = admin.account_email;
                                    card.querySelector(".role-display").innerText = admin.role_id === 1 ? "Normal" : admin.role_id === 2 ? "Admin" : "Super User";
                                    
                                    // Hide the dropdown and show the text display for the role
                                    card.querySelector(".role-display").style.display = "inline";
                                    card.querySelector(".role-select").style.display = "none";

                                    // Reset UI
                                    card.querySelectorAll("[contenteditable]").forEach(el => el.setAttribute("contenteditable", "false"));
                                    button.style.display = "none"; // Hide Cancel button
                                    button.previousElementSibling.innerText = "Edit"; // Reset Edit button text
                                    button.nextElementSibling.disabled = false; // Enable Delete button
                                })
                                .catch(error => {
                                    console.error("Error resetting admin data:", error);
                                });
                        };

            
                // Save Edits for Admins
                    const saveAdminEdits = async (card, id) => {
                        const updatedAdmin = {
                            account_first_name: card.querySelector("h3").innerText.split(" ")[0],
                            account_last_name: card.querySelector("h3").innerText.split(" ")[1],
                            account_username: card.querySelector("p:nth-of-type(1) span").innerText,
                            account_email: card.querySelector("p:nth-of-type(2) span").innerText,
                            role_id: card.querySelector(".role-select").value, // Get the selected role ID
                        };

                        try {
                            const response = await fetch(`/admins/${id}`, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                },
                                body: JSON.stringify(updatedAdmin),
                            });

                            if (response.ok) {
                                alert("Admin updated successfully!");
                                // Update the role display with the selected value
                                const roleDisplay = card.querySelector(".role-display");
                                const selectedRoleText = card.querySelector(".role-select option:checked").textContent;
                                roleDisplay.textContent = selectedRoleText;

                                // Disable editing mode
                                card.querySelectorAll("[contenteditable]").forEach(el => el.setAttribute("contenteditable", "false"));
                            } else {
                                alert("Failed to update admin.");
                            }
                        } catch (error) {
                            console.error("Error updating admin:", error);
                        }
                    };

            
                // Search Admins
                const adminSearchInput = document.getElementById("adminSearch");
                adminSearchInput.addEventListener("input", () => {
                    const searchQuery = adminSearchInput.value.trim();
                    adminList.innerHTML = ""; // Clear existing list
                    adminCurrentPage = 1; // Reset pagination
                    fetchAdmins(adminCurrentPage, searchQuery);
                });
            
                // Initial Load
                fetchAdmins();
            </script>
            
            
                        

            <section id="Volunteers" class="content-section">
                <h2>Volunteer Management</h2>
            
                <!-- Search Bar -->
                <div class="search-container">
                    <label for="searchVolunteers">Search Volunteers:</label>
                    <input 
                        type="text" 
                        id="searchVolunteers" 
                        placeholder="Search by name"
                        autocomplete="off"
                    >
                </div>
            
                <!-- Volunteer List -->
                <div id="volunteerList">
                    <!-- Volunteer cards will be dynamically inserted here -->
                </div>
            
                <!-- Load More Button -->
                <button id="loadMoreVolunteers" class="volunteer-load-more">Load More Volunteers</button>
            </section>
            
            <script>
                let currentPage = 1; // Pagination state
                const loadMoreButton = document.getElementById("loadMoreVolunteers");
                const volunteerList = document.getElementById("volunteerList");
            
                // Function to render a single volunteer card
                const renderVolunteerCard = (volunteer) => `
                    <div class="volunteer-card" data-id="${volunteer.volunteer_id}">
                        <div class="volunteer-info">
                            <h3 contenteditable="false">${volunteer.volunteer_first_name} ${volunteer.volunteer_last_name}</h3>
                            <p>
                                <strong>Email:</strong> 
                                <span contenteditable="false">${volunteer.volunteer_email}</span>
                            </p>
                            <p>
                                <strong>Phone:</strong> 
                                <span contenteditable="false">${volunteer.volunteer_phone_num}</span>
                            </p>
                            <p>
                                <strong>Preferred Contact:</strong> 
                                <span contenteditable="false">${volunteer.volunteer_preferred_communication}</span>
                            </p>
                        </div>
                        <div class="volunteer-actions">
                            <button class="edit-button" onclick="toggleEdit(this, ${volunteer.volunteer_id})">Edit</button>
                            <button class="cancel-button" style="display:none;" onclick="cancelEdit(this, ${volunteer.volunteer_id})">Cancel</button>
                            <button class="delete-button" onclick="deleteVolunteer(${volunteer.volunteer_id})">Delete</button>
                        </div>
                    </div>
                `;

                // Fetch Volunteers and Append to the List
                const fetchVolunteers = async (page = 1, searchQuery = "") => {
                    try {
                        const response = await fetch(`/volunteers?page=${page}&search=${searchQuery}`);
                        const data = await response.json();
            
                        // Append volunteers to the list
                        data.volunteers.forEach(volunteer => {
                            const volunteerCard = renderVolunteerCard(volunteer);
                            volunteerList.insertAdjacentHTML("beforeend", volunteerCard);
                        });
            
                        // If no more volunteers, hide the load more button
                        if (data.volunteers.length === 0) {
                            loadMoreButton.style.display = "none";
                        }
                    } catch (error) {
                        console.error("Error fetching volunteers:", error);
                    }
                };
            
                // Load More Button Click Event
                loadMoreButton.addEventListener("click", () => {
                    currentPage++;
                    fetchVolunteers(currentPage);
                });
            
                // Delete Volunteer
                const deleteVolunteer = async (id) => {
                    if (confirm("Are you sure you want to delete this volunteer?")) {
                        try {
                            const response = await fetch(`/volunteers/${id}`, { method: "DELETE" });
                            if (response.ok) {
                                document.querySelector(`.volunteer-card[data-id="${id}"]`).remove();
                                alert("Volunteer deleted successfully!");
                            } else {
                                alert("Failed to delete volunteer.");
                            }
                        } catch (error) {
                            console.error("Error deleting volunteer:", error);
                        }
                    }
                };
            
                // Toggle Edit Mode
                const toggleEdit = (button, id) => {
                    const card = document.querySelector(`.volunteer-card[data-id="${id}"]`);
                    const isEditing = button.innerText === "Save Edits";
            
                    if (isEditing) {
                        // Save edits
                        saveEdits(card, id);
                        button.innerText = "Edit";
                        button.nextElementSibling.style.display = "none"; // Hide Cancel button
                        button.nextElementSibling.nextElementSibling.disabled = false; // Enable Delete button
                    } else {
                        // Enable editing
                        card.querySelectorAll("[contenteditable]").forEach(el => el.setAttribute("contenteditable", "true"));
                        button.innerText = "Save Edits";
                        button.nextElementSibling.style.display = "inline-block"; // Show Cancel button
                        button.nextElementSibling.nextElementSibling.disabled = true; // Disable Delete button
                    }
                };
            
                // Cancel Edit
                const cancelEdit = (button, id) => {
                    const card = document.querySelector(`.volunteer-card[data-id="${id}"]`);
            
                    // Reset fields to original values by reloading the volunteer data
                    fetch(`/volunteers?page=1&id=${id}`)
                        .then(response => response.json())
                        .then(data => {
                            const volunteer = data.volunteers[0];
                            card.querySelector("h3").innerText = `${volunteer.volunteer_first_name} ${volunteer.volunteer_last_name}`;
                            card.querySelector("p:nth-of-type(1) span").innerText = volunteer.volunteer_email;
                            card.querySelector("p:nth-of-type(2) span").innerText = volunteer.volunteer_phone_num;
                            card.querySelector("p:nth-of-type(3) span").innerText = volunteer.volunteer_preferred_communication;
            
                            // Reset UI
                            card.querySelectorAll("[contenteditable]").forEach(el => el.setAttribute("contenteditable", "false"));
                            button.style.display = "none"; // Hide Cancel button
                            button.previousElementSibling.innerText = "Edit"; // Reset Edit button text
                            button.nextElementSibling.disabled = false; // Enable Delete button
                        })
                        .catch(error => {
                            console.error("Error resetting volunteer data:", error);
                        });
                };
            
                // Save Edits
                const saveEdits = async (card, id) => {
                    const updatedVolunteer = {
                        volunteer_first_name: card.querySelector("h3").innerText.split(" ")[0],
                        volunteer_last_name: card.querySelector("h3").innerText.split(" ")[1],
                        volunteer_email: card.querySelector("p:nth-of-type(1) span").innerText,
                        volunteer_phone_num: card.querySelector("p:nth-of-type(2) span").innerText,
                        volunteer_preferred_communication: card.querySelector("p:nth-of-type(3) span").innerText,
                    };
            
                    try {
                        const response = await fetch(`/volunteers/${id}`, {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify(updatedVolunteer),
                        });
            
                        if (response.ok) {
                            alert("Volunteer updated successfully!");
                            // Disable editing mode
                            card.querySelectorAll("[contenteditable]").forEach(el => el.setAttribute("contenteditable", "false"));
                        } else {
                            alert("Failed to update volunteer.");
                        }
                    } catch (error) {
                        console.error("Error updating volunteer:", error);
                    }
                };
            
                // Search Volunteers
                const searchInput = document.getElementById("searchVolunteers");
                searchInput.addEventListener("input", () => {
                    const searchQuery = searchInput.value.trim();
                    volunteerList.innerHTML = ""; // Clear existing list
                    currentPage = 1; // Reset pagination
                    fetchVolunteers(currentPage, searchQuery);
                });
            
                // Initial Load
                fetchVolunteers();
            </script>
            
            
            
            

<!-- Distribution Management Section in admin.ejs -->
<section id="Distribution" class="content-section">
    <h2>Distribution Management</h2>
    <a href="/distribution" class="button button-primary" style="background-color: var(--primary);">Add Distribution</a>
    <div id="distribution-management-container">
        <table class="event-table">
            <thead>
                <tr>
                    <th>Neighborhood</th>
                    <th>City</th>
                    <th>State</th>
                    <th>Date</th>
                    <th>Vests Brought</th>
                    <th>Vests Left</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="distribution-activities-table">
                <!-- Populated dynamically -->
            </tbody>
        </table>
        <button id="load-more-distributions" class="button">Load More</button>
    </div>
</section>

<script>

    // Fetch and display distributions with recipients
    // Fetch and display distributions with recipients
// Fetch and display distributions with recipients
async function fetchDistributions(page = 1) {
    try {
        const response = await fetch(`/distributions?page=${page}`);
        const { distributions, recipientsGrouped } = await response.json();

        const table = document.getElementById('distribution-activities-table');

        distributions.forEach((distribution) => {
            // Create distribution row
            const distributionRow = document.createElement('tr');
            distributionRow.dataset.distributionId = distribution.inventory_id;
            distributionRow.innerHTML = `
                <td>${distribution.distribution_neighborhood}</td>
                <td>${distribution.distribution_city}</td>
                <td>${distribution.distribution_state}</td>
                <td>${new Date(distribution.distribution_date).toISOString().split('T')[0]}</td>
                <td>${distribution.vests_brought}</td>
                <td>${distribution.vests_left}</td>
                <td>
                    <button onclick="viewRecipients(${distribution.inventory_id})">View Recipients</button>
                    <button class="edit-btn" onclick="editDistribution(${distribution.inventory_id})">Edit</button>
                    <button class="delete-btn" onclick="deleteDistribution(${distribution.inventory_id})">Delete</button>
                </td>
            `;
            table.appendChild(distributionRow);

            // Create recipient row (hidden by default)
            const recipientRow = document.createElement('tr');
            recipientRow.dataset.recipientFor = distribution.inventory_id;
            recipientRow.style.display = 'none';
            recipientRow.innerHTML = `
                <td colspan="7">
                    <table class="recipient-table">
                        <thead>
                            <tr>
                                <th>First Name</th>
                                <th>Last Name</th>
                                <th>Size</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="recipients-${distribution.inventory_id}">
                            ${
                                (recipientsGrouped[distribution.inventory_id] || [])
                                    .map(recipient => `
                                        <tr data-recipient-id="${recipient.recipient_id}">
                                            <td>${recipient.recipient_first_name}</td>
                                            <td>${recipient.recipient_last_name}</td>
                                            <td>${recipient.size}</td>
                                            <td>
                                                <button onclick="editRecipient(${recipient.recipient_id})">Edit</button>
                                                <button onclick="deleteRecipient(${recipient.recipient_id})">Delete</button>
                                            </td>
                                        </tr>
                                    `).join('')
                            }
                        </tbody>
                    </table>
                </td>
            `;
            table.appendChild(recipientRow);
        });

        currentPage = page;
    } catch (error) {
        console.error('Error fetching distributions:', error);
    }
}

// Toggle recipients visibility
function viewRecipients(distributionId) {
    const recipientRow = document.querySelector(`tr[data-recipient-for="${distributionId}"]`);
    if (recipientRow.style.display === 'none') {
        recipientRow.style.display = '';
    } else {
        recipientRow.style.display = 'none';
    }
}

// Edit Distribution
async function editDistribution(distributionId) {
    const row = document.querySelector(`tr[data-distribution-id="${distributionId}"]`);
    const originalState = row.children[2].textContent.trim();
    const originalDate = row.children[3].textContent.trim();

    row.querySelectorAll('td').forEach((td, index) => {
        if (index === 2) {
            td.innerHTML = `
                <select>
                    ${[
                        "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS",
                        "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY",
                        "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV",
                        "WI", "WY"
                    ].map(state => `<option value="${state}" ${state === originalState ? 'selected' : ''}>${state}</option>`).join('')}
                </select>
            `;
        } else if (index === 3) {
            td.innerHTML = `<input type="date" value="${originalDate}">`;
        } else if (index < 6) {
            td.contentEditable = true;
        }
    });

    const saveButton = document.createElement('button');
    saveButton.textContent = 'Save';
    saveButton.classList.add('save-btn');
    saveButton.onclick = async () => {
        const updatedData = {
            distribution_neighborhood: row.children[0].textContent.trim(),
            distribution_city: row.children[1].textContent.trim(),
            distribution_state: row.children[2].querySelector('select').value,
            distribution_date: row.children[3].querySelector('input').value,
            vests_brought: parseInt(row.children[4].textContent.trim()),
            vests_left: parseInt(row.children[5].textContent.trim()),
        };

        try {
            await fetch(`/distributions/${distributionId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(updatedData),
            });

            alert('Distribution updated successfully!');
            row.children[0].textContent = updatedData.distribution_neighborhood;
            row.children[1].textContent = updatedData.distribution_city;
            row.children[2].textContent = updatedData.distribution_state;
            row.children[3].textContent = updatedData.distribution_date;
            row.children[4].textContent = updatedData.vests_brought;
            row.children[5].textContent = updatedData.vests_left;

            row.querySelectorAll('td').forEach(td => (td.contentEditable = false));
            saveButton.remove();
        } catch (error) {
            console.error('Error updating distribution:', error);
            alert('Failed to update distribution.');
        }
    };

    row.children[6].appendChild(saveButton);
}

// Edit recipient
async function editRecipient(recipientId) {
    const row = document.querySelector(`tr[data-recipient-id="${recipientId}"]`);
    const originalSize = row.children[2].textContent.trim();

    row.querySelectorAll('td').forEach((td, index) => {
        if (index === 2) {
            td.innerHTML = `
                <select>
                    ${["XS", "S", "M", "L", "XL", "XXL", "XXXL", "XXXXL"]
                        .map(size => `<option value="${size}" ${size === originalSize ? 'selected' : ''}>${size}</option>`).join('')}
                </select>
            `;
        } else if (index < 3) {
            td.contentEditable = true;
        }
    });

    const saveButton = document.createElement('button');
    saveButton.textContent = 'Save';
    saveButton.onclick = async () => {
        const updatedRecipient = {
            recipient_first_name: row.children[0].textContent.trim(),
            recipient_last_name: row.children[1].textContent.trim(),
            size: row.children[2].querySelector('select').value,
        };

        try {
            await fetch(`/recipients/${recipientId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(updatedRecipient),
            });

            alert('Recipient updated successfully!');
            row.children[0].textContent = updatedRecipient.recipient_first_name;
            row.children[1].textContent = updatedRecipient.recipient_last_name;
            row.children[2].textContent = updatedRecipient.size;

            row.querySelectorAll('td').forEach(td => (td.contentEditable = false));
            saveButton.remove();
        } catch (error) {
            console.error('Error updating recipient:', error);
            alert('Failed to update recipient.');
        }
    };

    row.children[3].appendChild(saveButton);
}

// Initial fetch
fetchDistributions();


</script>



<style>
    .recipient-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }

    .recipient-table th,
    .recipient-table td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: center;
    }

    .recipient-table th {
        background-color: #6c757d;
        color: white;
        font-weight: bold;
    }

    .event-table {
        width: 100%;
        margin-bottom: 20px;
        border-collapse: collapse;
    }

    .event-table th,
    .event-table td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: center;
    }

    .event-table th {
        background-color: #007BFF;
        color: white;
        font-weight: bold;
    }

    
</style>

        </main>
    </div>
    <script src="script.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const navItems = document.querySelectorAll('.nav-item');
            const sections = document.querySelectorAll('.content-section');
    
            navItems.forEach(item => {
                item.addEventListener('click', () => {
                    // Remove 'active' class from previously active nav item and section
                    document.querySelector('.nav-item.active').classList.remove('active');
                    document.querySelector('.content-section.active').classList.remove('active');
    
                    // Add 'active' class to the clicked nav item
                    item.classList.add('active');
    
                    // Find the corresponding section by its ID and activate it
                    const sectionId = item.dataset.section;
                    document.getElementById(sectionId).classList.add('active');
                });
            });
        });
    </script>
    <script src="/tableau-dashboard.js"></script>

</body>
</html>
